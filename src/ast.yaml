namespace:
    name: nls
visitors:
  - name: syntax_checker
  - name: type_checker
  - name: evaluator
  - name: dotifier
nodes:
# Literals
  - name: bul
    constr_lval: |
        _variant = new Variant;
        _variant->value.bul = lval[0] == 't';
        _variant->value_type = NLS_BUL;
    evaluator: variant

  - name: i32
    constr_lval: |
        _variant = new Variant;
        _variant->value.i32 = atoi(lval);
        _variant->value_type = NLS_I32;
    evaluator: variant

  - name: i64
    constr_lval: |
        _variant = new Variant;
        _variant->value.i64 = atol(lval);
        _variant->value_type = NLS_I64;
    evaluator: variant

  - name: r32
    constr_lval: |
        _variant = new Variant;
        _variant->value.r32 = atof(lval);
        _variant->value_type = NLS_R32;
    evaluator: variant

  - name: r64
    constr_lval: |
        _variant = new Variant;
        _variant->value.r64 = atof(lval);
        _variant->value_type = NLS_R64;
    evaluator: variant

  - name: str
    constr_lval: |
        _variant = new Variant;
        _variant->value.str = new string(lval+1, strlen(lval)-2);
        _variant->value_type = NLS_STR;
    evaluator: variant

# Comment
  - name: comment
    constr_lval: |
        _variant = new Variant;
        _variant->value.str = new string(lval);
        _variant->value_type = NLS_STR;
    evaluator: variant

# Identifier
  - name: ident
    constr_lval: |
        stringstream ss;
        ss << *lval;
        _name = ss.str();
    evaluator: custom
# Expressions - Arithmetic
  - name: add
    evaluator: expr
  - name: sub
    evaluator: expr
  - name: mul
    evaluator: expr
  - name: div
    evaluator: expr
  - name: mod
    evaluator: expr
  - name: pow
    evaluator: expr
  - name: exp
  - name: sqrt
  - name: abs
  - name: max
  - name: min
  - name: log
  - name: log2
  - name: log10
  - name: ceil
  - name: floor
  - name: trunc
  - name: isnan
  - name: isinf
# Expressions - Trigonometri
  - name: sin
  - name: cos
  - name: tan
  - name: asin
  - name: acos
  - name: atan
  - name: asinh
  - name: acosh
  - name: atanh
# Expressions - Comparison
  - name: equal
    evaluator: expr
  - name: not_equal
    evaluator: expr
  - name: lthan
    evaluator: expr
  - name: lthan_equal
    evaluator: expr
  - name: gthan
    evaluator: expr
  - name: gthan_equal
    evaluator: expr
# Expressions - Logical
  - name: and
    evaluator: expr
  - name: or
    evaluator: expr
  - name: xor
  - name: not
    evaluator: expr
# Expressions - Bitwise
  - name: bw_and
    evaluator: expr
  - name: bw_or
    evaluator: expr
  - name: bw_xor
    evaluator: expr
  - name: bw_not
    evaluator: expr
  - name: bw_lshift
    evaluator: expr
  - name: bw_rshift
    evaluator: expr
# Expressions - Function call, arguments and accessor
  - name: call
  - name: arg_list
  - name: accessor
# Expressions - Constructors
  - name: as
    evaluator: custom
  - name: shape
    evaluator: custom
  - name: range
  - name: new
# Statements
  - name: alias
  - name: assign
    evaluator: manual
  - name: query
    evaluator: custom
# Statements - Organization
  - name: import
  - name: module
  - name: block
  - name: stmt
  - name: stmt_list
# Statements - Control
  - name: while
    evaluator: custom
  - name: break
    evaluator: custom
  - name: continue
    evaluator: custom
  - name: when
    evaluator: custom
  - name: case_list
    evaluator: custom
  - name: is
    evaluator: custom
  - name: otherwise
    evaluator: custom
  - name: return
    evaluator: custom
# Statements - Definitions
  - name: record
  - name: record_def
  - name: attr
  - name: attr_list
  - name: function_def
  - name: function_body
  - name: param
  - name: param_list
# Misc
  - name: noop
  - name: empty
  - name: anon
